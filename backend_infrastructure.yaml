Resources:
  MyS3FileUploadInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: file-upload-input-bucket-praveen
      PublicAccessBlockConfiguration:   
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
          AllowedOrigins:
            - "*"
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          #lambda
          import json
          import boto3
          import uuid


          print('loading function')


          def trigger_intance(unique_id):
              user_data = '#!bin/bash\ncd /home/ubuntu/auto_download\npython3 file_updater.py '
              user_data += '"'
              user_data += unique_id
              user_data += '"'
              print(user_data)
              key_pair = 'auto-process-instance'
              iam_profile = {'Name': 'auto-file-processor'}
              
              ec2_client = boto3.client('ec2')
              ec2_client.run_instances(ImageId = 'ami-084e80b04f84b2571',InstanceType = 't2.micro',UserData=user_data,MinCount=1,MaxCount=1,KeyName=key_pair,IamInstanceProfile = iam_profile)
              


          def lambda_handler(event, context):

              print('event:\n')
              print(event)
              
              text_ipt = event['text_input']
              object_name = event['ipt_file_name']

              
              s3_client = boto3.client('s3')
              bucket_name = 'file-upload-input-bucket-praveen'
              table_name = 'Dynamo_api-lambda-db'
              expiration = 300

              upd_details = s3_client.generate_presigned_post(bucket_name, object_name, ExpiresIn=expiration)
              
              print('u:',upd_details)

              
              dynamo_db_client = boto3.client('dynamodb')
              
              new_item = {'id':{},'input_text':{},'input_file_path':{}}
              unique_id = str(uuid.uuid4())
              new_item['id']['S'] = unique_id
              new_item['input_text']['S'] = text_ipt
              new_item['input_file_path']['S'] = bucket_name +'/' + object_name
              
              dynamo_db_client.put_item(TableName = table_name, Item= new_item)

              
              http_resp = {}
              http_resp['statusCode'] = 200
              http_resp['headers'] = {}
              http_resp['headers']['Content-Type'] = 'application/json'
              http_resp['body'] = upd_details
              
              print('\n\nhttpres:\n')
              print(http_resp)
              
              trigger_intance(unique_id)
              
              return http_resp
              
              


      FunctionName:
        Ref: LambdaFuncName
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 6
      Role: !GetAtt IAMRole.Arn
    DependsOn:
      - DynamoDBTable
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
    DependsOn:
      - IAMRole
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        Ref: APIName
    DependsOn:
      - LambdaFunction
  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: LambdaFuncName
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
    DependsOn:
      - APIGatewayResource
  APIGatewayCORSMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - APIGatewayResource

  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod
  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
Parameters:
  LambdaFuncName:
    Type: String
    Default: Lambda_api-lambda-db
  DynamoDBTableName:
    Type: String
    Default: Dynamo_api-lambda-db
  APIName:
    Type: String
    Default: API_api-lambda-db
  EnvironmentName:
    Type: String
    Default: Prod